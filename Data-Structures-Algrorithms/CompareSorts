import java.util.Scanner;
import java.util.Random;
/*===================================================================
|  Author:       Donovan Roseau
|  Date:         4/26/16
|  Class:        CSCI 230 - 1
|  Assignment:   5
|  Task:         Implement each different sorting algorithms and test
				 its run-time complexity.	
|
| Input:         Input is needed from the User when prompted. The
|                source of input is the keyboard
|
| Output:        A method is called by user, then the output will
|                be a list of sorted integers.
|
|  I certify that this code is my own work.
 ===================================================================*/

public class compareSorts
{
	/*
	 * Puts a list in increasing order by checking if current integer is less than 
	 * the previous, if it is, the current and previous integers swap indexes
	 * @param list an array of integers
	 */
	public static void insertionSort(int[] a)
	{
		int i, j, newValue;//nothing encountered yet

		for (i = 1; i < a.length; i++)//iterates through list
		{
		   newValue = a[i];
		   j = i;
		   while (j > 0 && a[j - 1] > newValue)
		   {
			   a[j] = a[j - 1];//swaps j with previous integer
			   j--;
		   }
		   a[j] = newValue;
		}
	}

	/*
	 *Creates a temp list to merge 
	 *@param list creates a list of integers
	 */
	public static void mergeSort(int[] a)
	{
		int[] temp = new int[a.length];
		
		//sort list recursively
		mergeSort(a, temp, 0, a.length - 1);
	}
	
	/*
	 * Splits a list in half, sorts each side, then puts the list together
	 * @param a list of integers
	 * @param temp a temporary list of integers
	 * @param left an integer
	 * @param right an integer
	 */
	private static void mergeSort(int[] a, int[] temp, int left, int right)
	{
		if (left < right)//Not base case
		{
			//Subdivide the list in half, find the midpoint
			int center = (left + right) / 2;
			mergeSort(a, temp, left, center);//Sort the left half
			mergeSort(a, temp, center + 1, right);//Sort the right half
			
			//copy the partially sorted a into the temp array
			for (int i = left; i <= right; i++)//Run until left sorted array
			{
				temp[i] = a[i];//Copies temporary sorted list into array
			}
			int i1 = left;//left sorted part index
			int i2 = center + 1;//right sorted part index
			
			//current is the index into a
			for (int current = left; current <= right; current++)
			{
				if (i1 == center + 1)//if left list empty, copy from the right side
				{
					a[current] = temp[i2];
					i2++;
				}
				//Now check if the right side is empty
				else if(i2 > right)
				{
					a[current] = temp[i1];
					i1++;
				}
				//Neither side empty, so check for the smaller item and copy it
				else if (temp[i1] < temp[i2])
				{
					//Check for the smaller itme, and then copy it out
					a[current] = temp[i1];
					i1++;
				}
				else
				{
					a[current] = temp[i2];
					i2++;
				}
			}
		}
	}

	private static void swap(int[] a, int i, int j)
	{
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}

	
	public static void quickSort(int[] a)
	{
		quickSort(a, 0, a.length - 1);
	}

	/*
	 * @param a list of integers
	 * @param left an integer
	 * @param righ an integer
	 */
	private static void quickSort(int[] a, int left, int right)
	{
		if (left < right)//more remaining to sort?
		{
			//get median of 3
			int pivot = a[(left + right) / 2];
			
			//get partitions
			int i = left;
			int j = right;
			
			//create partitions by moving larger items to right,
			//and smaller items to left partition
			while ( i < j)
			{
				//keep moving i until we find an item that belongs
				//on the other side
				while (a[i] < pivot)
				{
					i++;
					//now, i points to first item > pivot value
					
					//keep moving j until we find an itme that belongs
					//on the other side
				}
				while (a[j] > pivot)
				{
					j--;
					//now, j points to first item < pivot value
				}
				if (i <= j)// haven't crossed yet
				{
					swap(a, i, j);
					i++;
					j--;
				}
			}
			//now, the two partitions have been created,
			//so, put pivot back in the middle
			quickSort(a, left, j);
			quickSort(a, i, right);
		}
	}

	/*
	 * Generates a random number between the min and max value inclusively
	 * @param min integer with the least value possible
	 * @param max integer with the max value possible
	 * @return integer 
	 */
	public static int randNum(int min, int max)
	{
		Random num = new Random();//creates object
		//generates number between a given min and max
		int randomNum = num.nextInt((max - min) + 1) + min;
		return randomNum;
	}
	/*
	 * Method that calculates a sorting algorithms run-time after five runs
	 * @param size used for the size of a list
	 */
	public static void getAverage(int size)
	{
		int[] array = new int[size];//creates list 
		Random rand = new Random();
		for (int i =0; i < size; i++)//iterates through list
		{
			//each index in array has a random int between 0 and 100
			array[i] = rand.nextInt(1000);
		}

		long startTime = System.nanoTime();   // start timing

		compareSorts.quickSort(array);

		long endTime = System.nanoTime();    // end timing
		double runtimeInMilliseconds = (double)(endTime - startTime) / 1000000.0;

		long startTime2 = System.nanoTime();   // start timing

		compareSorts.quickSort(array);

		long endTime2 = System.nanoTime();    // end timing
		double runtimeInMilliseconds2 = (double)(endTime2 - startTime2) / 1000000.0;

		long startTime3 = System.nanoTime();   // start timing

		compareSorts.quickSort(array);

		long endTime3 = System.nanoTime();    // end timing
		double runtimeInMilliseconds3 = (double)(endTime3 - startTime3) / 1000000.0;

		long startTime4 = System.nanoTime();   // start timing

		compareSorts.quickSort(array);

		long endTime4 = System.nanoTime();    // end timing
		double runtimeInMilliseconds4 = (double)(endTime4 - startTime4) / 1000000.0;

		long startTime5 = System.nanoTime();   // start timing

		compareSorts.quickSort(array);

		long endTime5 = System.nanoTime();    // end timing
		double runtimeInMilliseconds5 = (double)(endTime5 - startTime5) / 1000000.0;
		
		//takes all run-times and calculates the averave
		double average = (runtimeInMilliseconds + runtimeInMilliseconds2 + runtimeInMilliseconds3+runtimeInMilliseconds4
				+runtimeInMilliseconds5)/5;
		System.out.println("\nSorting by mergesort took " + average + " milliseconds...");
	}

	public static void main(String args[])
	{
		Scanner scanner = new Scanner(System.in);
		int selection = scanner.nextInt();
		if (selection == 1)
		{
			int size = scanner.nextInt();
			int[] array = new int[size];
			for (int i = 0; i < size; i++)
			{
				int inputs = scanner.nextInt();
				array[i] = inputs;
			}
			for (int i = 0; i < size; i++)
			{
				System.out.print(array[i] + " ");
			}
			System.out.println();
            long startTime = System.nanoTime();
            insertionSort(array);
            long endTime = System.nanoTime();
            for (int i = 0; i < size; i++)
            {
            	System.out.print(array[i] + " ");
            }
            System.out.println();
            double runtimeInMilliseconds = (double)(endTime - startTime) / 1000000.0;
            System.out.println("Sorting by insertionSort took " + runtimeInMilliseconds + " milliseconds...");

		}
		if (selection == -1)
		{
			int size = scanner.nextInt();
			int[] array = new int[size];
			for (int i = 0; i < size; i++)
			{
				int inputs = randNum(0,1000);
				array[i] = inputs;
			}
			for (int i = 0; i < size; i++)
			{
				System.out.print(array[i] + " ");
			}
			System.out.println();
            long startTime = System.nanoTime();   // start timing
            insertionSort(array);
            long endTime = System.nanoTime();    // end timing
            for (int i = 0; i < size; i++)
			{
				System.out.print(array[i] + " ");
			}
			System.out.println();
            double runtimeInMilliseconds = (double)(endTime - startTime) / 1000000.0;
            System.out.println("Sorting by insertionSort took " + runtimeInMilliseconds + " milliseconds...");
		}

		if (selection == 2)
		{
			int size = scanner.nextInt();
			int[] list = new int[size];
			for (int i = 0; i < size; i++)
			{
				int inputs = scanner.nextInt();
				list[i] = inputs;
			}
			for (int i = 0; i < size; i++)
			{
				System.out.print(list[i] + " ");
			}
			System.out.println();
			long startTime = System.nanoTime();
			mergeSort(list);
			long endTime = System.nanoTime();
			for (int i = 0; i < size; i++)
			{
				System.out.print(list[i] + " ");
			}
			System.out.println();
			double runtimeInMilliseconds = (double)(endTime - startTime) / 1000000.0;
            System.out.println("Sorting by mergesort took " + runtimeInMilliseconds + " milliseconds...");
		}
		if (selection == -2)
		{
			int size = scanner.nextInt();
			int[] list = new int[size];
			for (int i = 0; i < size; i++)
			{
				int inputs = randNum(0,1000);
				list[i] = inputs;
			}
			for (int i = 0; i < size; i++)
			{
				System.out.print(list[i] + " ");
			}
			System.out.println();
			long startTime = System.nanoTime();
			mergeSort(list);
			long endTime = System.nanoTime();
			for (int i = 0; i < size; i++)
			{
				System.out.print(list[i] + " ");
			}
			System.out.println();
			double runtimeInMilliseconds = (double)(endTime - startTime) / 1000000.0;
            System.out.println("Sorting by mergesort took " + runtimeInMilliseconds + " milliseconds...");
		}

		if (selection == 3)
		{
			int size = scanner.nextInt();
			int[] list = new int[size];
			for (int i = 0; i < size; i++)
			{
				int inputs = scanner.nextInt();
				list[i] = inputs;
			}
			for (int i = 0; i < size; i++)
			{
				System.out.print(list[i] + " ");
			}
			System.out.println();
			long startTime = System.nanoTime();
			quickSort(list);
			long endTime = System.nanoTime();
			for (int i = 0; i < size; i++)
			{
				System.out.print(list[i] + " ");
			}
			System.out.println();
			double runtimeInMilliseconds = (double)(endTime - startTime) / 1000000.0;
            System.out.println("Sorting by quicksort took " + runtimeInMilliseconds + " milliseconds...");
		}
		if (selection == -3)
		{
			int size = scanner.nextInt();
			int[] list = new int[size];
			for (int i = 0; i < size; i++)
			{
				int inputs = randNum(0,1000);
				list[i] = inputs;
			}
			for (int i = 0; i < size; i++)
			{
				System.out.print(list[i] + " ");
			}
			System.out.println();
			long startTime = System.nanoTime();
			quickSort(list);
			long endTime = System.nanoTime();
			for (int i = 0; i < size; i++)
			{
				System.out.print(list[i] + " ");
			}
			System.out.println();
			double runtimeInMilliseconds = (double)(endTime - startTime) / 1000000.0;
            System.out.println("Sorting by quicksort took " + runtimeInMilliseconds + " milliseconds...");

		}

		scanner.close();


	}
}
