import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Gambling extends Thread {

	 /*
	 * Create threads for each website and give
	 * random winning percentages(not actual)
	 */
	public static int pot = 0;
	public static Map<String, String> userSelection = new HashMap<String, String>();//Hash map for user and team selection
	public static Map<String, Integer>userWager = new HashMap<String, Integer>();//Hash map for user and their wager
	public static String[] userList = {"", "NoahsArk", "Gui","MaiMula","Bea-Man","Marge","Vinny","GabbyGabby"};//List of users

	/*
	 * Method for threads to execute
	 * randomizes a percentage each team has of winning
	 */
	public void run()
	{
		String[] teamList = {"Alabama","Ohio State","Clemson","Washington"};//List of each team in playoffs
		DecimalFormat df = new DecimalFormat("#.00");//Sets percentage to 2nd decimal place
		df.setRoundingMode(RoundingMode.FLOOR);
		double random;
		double percentage = 100;

		//Loop through each team in list and generates random percentage for 0 - 100
		for(int i = 0; i<teamList.length; i++)
		{
			random = Math.random() * percentage + 1;
			System.out.println(teamList[i] + " has a " + df.format(random) + "% chance of winning the CFP!");
			percentage -= random;
		try
		{
			Thread.sleep(1000);
		}
		catch(InterruptedException e)
		{
			break;
		}
		}
	}

	/*
	 * Prints the table for the teams and the probability of each team winning
	 */
	public static void bracket()
	{
		int counter = 3;
		String[] teamList = {"Alabama","Ohio State","Clemson","Washington"};//List of teams
		String tableFormat = "| %-4d | %-15s | %-14s|%n";
		System.out.format("+------+-----------------+---------------+%n");
		System.out.format("| Rank |       Team      | Matchup       |%n");
		System.out.format("+------+-----------------+---------------+%n");
		for (int i = 0; i < 4; i++)
		{
			System.out.format(tableFormat,i + 1,teamList[i],"vs " + teamList[counter]);
			delay(1000);//Slow down execution. Lets user read output
			counter--;
		}
		System.out.format("+------+-----------------+---------------+%n");
		}

	/*
	 * creates a table of users and there selection
	 */
	public static Map<String, String> teamSelection(String ID, String selection, int wager)
	{
		int random;//Used for choosing random team
		int intRandom;//Used for making random bet
		String[] teamList = {"Alabama","Ohio State","Clemson","Washington"};
		userList[0] = ID;//Assigns user to firts slot in userList
		userSelection.put(ID,selection);//Assigns team to user
		userWager.put(ID,wager);//assigns wager to user
		String tableFormat = "| %-10s | %-14s| %-8d |%n";
		System.out.format("+-----------+----------------+----------+%n");
		System.out.format("| User      | Selection      | Wager    |%n");
		System.out.format("+-----------+----------------+----------+%n");
		System.out.format(tableFormat,ID,selection,wager);

		for (int i = 1; i < userList.length; i++)
		{
			random = (int)(Math.random() * teamList.length);//randomize number 0-3
			intRandom = (int)(Math.random() * 500 + 100);//randomize number 100-500
			userSelection.put(userList[i], teamList[random]);
			userWager.put(userList[i],intRandom);
			pot += intRandom;//Adds wager to pot
			System.out.format(tableFormat,userList[i],teamList[random], intRandom);
		}
		System.out.format("+------------+---------------+----------+%n");
		return userSelection;

	}

	/*
	 * Random winner is chosen from a list of teams
	 */
	public static String pickWinner()
	{
		String winner;
		String[] teamList = {"Alabama","Ohio State","Clemson","Washington"};
		int random = (int)(Math.random() * teamList.length);
		winner = teamList[random];
		return winner;
	}

	/*
	 * slows down execution
	 */
	public static void delay(int sec)
	{
		try
		{
			sleep(sec);
		}
		catch (InterruptedException e)
		{
			e.printStackTrace();
		}
	}

	public static void main(String args[])
	{
		//Start Application and prompt user with bracket and question
		Scanner in = new Scanner(System.in);
		PrintWriter out = null;
		try {
			out = new PrintWriter("Winners.txt");
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		int wager;
		String input;//user input
		String selection;//user team selection
		String userName;//user's username
		System.out.println("WELCOME TO OS BETTING.COM");
		delay(1000); // Slows down execution. Lets Users read print statements
		System.out.println("Here is the 2016 CFP bracket!");
		delay(1000);
		bracket();
		System.out.print("Would you like to start betting?");
		input = in.next();

		//Checks for valid user input
		boolean valid = false;
		while(valid == false)
		{
			if(input.equalsIgnoreCase("Yes") || input.equalsIgnoreCase("No"))
			{
				valid = true;
			}
			else
			{
				System.out.print("Sorry I didn't catch that? Try again. ");
				input = in.next();
			}
		}

		//Creates two threads that return winning percentages for each team
		if(input.equalsIgnoreCase("Yes"))
		{
			System.out.print("Ok. Now create a username. ");
			userName = in.next();
			System.out.println("");
			Gambling site1 = new Gambling();
			Gambling site2 = new Gambling();
			Gambling site3 = new Gambling();

			//DraftKings thread
			System.out.println("DraftKings CFP Predictions: ");

			//Prints random chances of each team winning from
			site1.start();
			try
			{
			site1.join();
			}
			catch (InterruptedException e)
			{
			e.printStackTrace();
			}

			//ESPN thread
			System.out.println("");
			System.out.println("ESPN CFP Predictions: ");
			site2.start();
			try
			{
				site2.join();
			}
			catch(InterruptedException e)
			{
			e.printStackTrace();
			}

			//Fox News Thread
			System.out.println("");
			System.out.println("Vegas CFP Predictions: ");
			site3.start();
			try
			{
				site3.join();
			}
			catch(InterruptedException e)
			{
				e.printStackTrace();
			}
			System.out.println("");
			System.out.print("Now who do you think will win? ");
			selection = in.next();
			while(!selection.equalsIgnoreCase("Alabama") && !selection.equalsIgnoreCase("Ohio State") &&
				  !selection.equalsIgnoreCase("Clemson") && !selection.equalsIgnoreCase("Washington"))
			{
				System.out.print("Not a team! Try again. ");
				selection = in.next();
			}
			System.out.print("And how much would you like to wager? ");
			wager = in.nextInt();
			while(wager <= 0)
			{
				System.out.print("Come on! Bet some real money!");
				wager = in.nextInt();
			}

			//creates a table of the user, their team, and their wagers
			teamSelection(userName,selection,wager);
			delay(1000);
			String winner = pickWinner();
			System.out.print("The winner of the National Title is ");
			delay(1000);
			System.out.print(winner + "!");

			//Checking for users that won and writes to a file
			out.write("The Winners of the bet are ");//Writes to Winners.txt
			for(Map.Entry<String, String> teamEntry : userSelection.entrySet())
			{

				String user = teamEntry.getKey();
				String team = teamEntry.getValue();
				if(team.equalsIgnoreCase(winner))
				{
					out.print(user + ", ");
				}
			}
			out.println("");

			out.println("They won " + "$" +pot);
		}
		else
		{
			System.out.println("YOU'RE NO FUN!");
		}


		in.close();
		out.close();


	}
}
